{"version":3,"sources":["components/habit.jsx","components/habitAddForm.jsx","components/habits.jsx","components/navbar.jsx","app.jsx","components/simpleHabit.jsx","index.js"],"names":["Habit","handleIncrement","props","onIncrement","habit","handleDecrement","onDecrement","handleDelete","onDelete","console","log","this","name","count","className","onClick","PureComponent","HabitAddForm","memo","formRef","React","createRef","inputRef","ref","onSubmit","event","preventDefault","current","value","onAdd","reset","type","placeholder","Habits","handleAdd","habits","map","id","onReset","Component","Navbar","totalCount","SimpleHabit","useState","setCount","spanRef","useRef","useEffect","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6PA8CeA,E,4MAhCXC,gBAAkB,WACd,EAAKC,MAAMC,YAAY,EAAKD,MAAME,Q,EAGtCC,gBAAkB,WACd,EAAKH,MAAMI,YAAY,EAAKJ,MAAME,Q,EAGtCG,aAAe,WACX,EAAKL,MAAMM,SAAS,EAAKN,MAAME,Q,uDAjBnC,WACIK,QAAQC,IAAR,iBAAsBC,KAAKT,MAAME,MAAMQ,KAAvC,e,kCAGJ,WACIH,QAAQC,IAAR,iBAAsBC,KAAKT,MAAME,MAAMQ,KAAvC,mB,oBAeJ,WAAU,IAAD,EACmBD,KAAKT,MAAME,MAA3BQ,EADH,EACGA,KAAMC,EADT,EACSA,MACd,OACA,qBAAIC,UAAU,QAAd,UACI,sBAAMA,UAAU,aAAhB,SAA8BF,IAC9B,sBAAME,UAAU,cAAhB,SAA+BD,IAC/B,wBAAQC,UAAU,8BAA8BC,QAASJ,KAAKV,gBAA9D,SACI,mBAAGa,UAAU,yBAEjB,wBAAQA,UAAU,8BAA8BC,QAASJ,KAAKN,gBAA9D,SACI,mBAAGS,UAAU,0BAEjB,wBAAQA,UAAU,4BAA4BC,QAASJ,KAAKJ,aAA5D,SACI,mBAAGO,UAAU,0B,GArCTE,iBCyBLC,EArBMC,gBAAK,SAAAhB,GACtB,IAAMiB,EAAUC,IAAMC,YAChBC,EAAWF,IAAMC,YAUvB,OACI,uBAAME,IAAKJ,EAASL,UAAU,WAAWU,SAT5B,SAAAC,GACbA,EAAMC,iBACN,IAAMd,EAAOU,EAASK,QAAQC,MAC9BhB,GAAQV,EAAM2B,MAAMjB,GAEpBO,EAAQQ,QAAQG,SAIhB,UACI,uBAAOP,IAAKD,EAAUS,KAAK,OAAOjB,UAAU,YAAYkB,YAAY,UACpE,wBAAQlB,UAAU,aAAlB,uBCyBGmB,E,4MAvCXhC,gBAAkB,SAACG,GACf,EAAKF,MAAMC,YAAYC,I,EAG3BC,gBAAkB,SAACD,GACf,EAAKF,MAAMI,YAAYF,I,EAG3BG,aAAe,SAACH,GACZ,EAAKF,MAAMM,SAASJ,I,EAGxB8B,UAAY,SAAAtB,GACR,EAAKV,MAAM2B,MAAMjB,I,4CAGrB,WAAU,IAAD,OACL,OACA,qCACA,cAAC,EAAD,CAAciB,MAAOlB,KAAKuB,YAC1B,6BAEQvB,KAAKT,MAAMiC,OAAOC,KAAI,SAAAhC,GAAK,OACvB,cAAC,EAAD,CAEAA,MAAOA,EACPD,YAAa,EAAKF,gBAClBK,YAAa,EAAKD,gBAClBG,SAAU,EAAKD,cAJVH,EAAMiC,SASvB,wBAAQvB,UAAU,eAAeC,QAASJ,KAAKT,MAAMoC,QAArD,8B,GApCaC,aCUNC,E,4JAXX,WACI,OACI,sBAAK1B,UAAU,SAAf,UACI,mBAAGA,UAAU,4BACb,iDACA,sBAAMA,UAAU,eAAhB,SAAgCH,KAAKT,MAAMuC,oB,GANtCzB,iB,GCGHuB,Y,OCsBHG,MAxBf,SAAqBxC,GAAQ,IAAD,EACEyC,mBAAS,GADX,mBACjB9B,EADiB,KACV+B,EADU,KAElBC,EAAUC,mBAWhB,OAJAC,qBAAU,WACNtC,QAAQC,IAAR,8BAAmCG,MACpC,CAACA,IAGA,qBAAIC,UAAU,QAAd,UACI,sBAAMS,IAAKsB,EAAS/B,UAAU,aAA9B,qBACA,sBAAMA,UAAU,cAAhB,SAA+BD,IAC/B,wBAAQC,UAAU,8BAA8BC,QAbhC,WACpB6B,EAAS/B,EAAQ,IAYb,SACI,mBAAGC,UAAU,6B,MCd7BkC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAGFC,SAASC,eAAe,W","file":"static/js/main.39261ebb.chunk.js","sourcesContent":["import React, { PureComponent } from 'react';\n\nclass Habit extends PureComponent { \n    // PureComponent 사용시 본인의 state 없이 props만 가져 render() x\n    // props으로 전달된 콜백함수들 호출, props으로 전달받은 각각의 데이터를 다시 인자로 전달\n\n    componentDidMount() { // component가 ui 상에 등록될 때\n        console.log(`habit: ${this.props.habit.name} mounted`)\n    }\n\n    componentWillUnmount() { // component가 ui 상에서 지워질 때\n        console.log(`habit: ${this.props.habit.name} willUnmount`)\n    }\n\n    handleIncrement = () => {\n        this.props.onIncrement(this.props.habit);\n    };\n\n    handleDecrement = () => {\n        this.props.onDecrement(this.props.habit);\n    };\n\n    handleDelete = () => {\n        this.props.onDelete(this.props.habit);\n    };\n\n    render() {\n        const { name, count } = this.props.habit; // props : habits.jsx에서 받아옴\n        return (\n        <li className='habit'>\n            <span className=\"habit-name\">{name}</span>\n            <span className=\"habit-count\">{count}</span>\n            <button className=\"habit-button habit-increase\" onClick={this.handleIncrement}>\n                <i className=\"fas fa-plus-square\"></i>\n            </button>\n            <button className=\"habit-button habit-decrease\" onClick={this.handleDecrement}>\n                <i className=\"fas fa-minus-square\"></i>\n            </button>\n            <button className=\"habit-button habit-delete\" onClick={this.handleDelete}>\n                <i className=\"fas fa-trash\"></i>\n            </button>\n        </li>\n        );\n    }\n}\n\nexport default Habit;","import React, { memo } from 'react';\n// PureComponent\n// component나 state의 변화가 없다면 render() 실행을 막음 => PureComponent(class component에서), memo(function component에서)\n// 최상위가 바뀌지 않으면 re-rendering이 발생하지 않음\n// React.Component와 다르게 shouldComponentUpdate()를 구현함 -> shallow props and state comparision\n\nconst HabitAddForm = memo(props => {\n    const formRef = React.createRef();\n    const inputRef = React.createRef(); // 멤버 변수를 정의한 후 원하는 리액트 컴포넌트에 ref로 연결\n\n    const onSubmit = event => {\n        event.preventDefault(); // 새로고침 방지\n        const name = inputRef.current.value;\n        name && props.onAdd(name);\n        // inputRef.current.value = '';\n        formRef.current.reset();\n    }\n\n    return (\n        <form ref={formRef} className=\"add-form\" onSubmit={onSubmit}>\n            <input ref={inputRef} type=\"text\" className=\"add-input\" placeholder=\"Habit\" />\n            <button className=\"add-button\">Add</button>\n        </form>\n    ); \n});\n\n\nexport default HabitAddForm;","import React, { Component } from 'react';\nimport Habit from './habit';\nimport HabitAddForm from './habitAddForm';\n\nclass Habits extends Component {\n\n    // 부모 : app.jsx \n    handleIncrement = (habit) => {\n        this.props.onIncrement(habit);\n    };\n\n    handleDecrement = (habit) => {\n        this.props.onDecrement(habit);\n    };\n\n    handleDelete = (habit) => {\n        this.props.onDelete(habit);\n    };\n\n    handleAdd = name => {\n        this.props.onAdd(name);\n    }\n\n    render() {\n        return (\n        <>\n        <HabitAddForm onAdd={this.handleAdd} />\n        <ul>\n            {\n                this.props.habits.map(habit => (\n                    <Habit \n                    key={habit.id} \n                    habit={habit}\n                    onIncrement={this.handleIncrement} \n                    onDecrement={this.handleDecrement} \n                    onDelete={this.handleDelete} \n                />\n                ))\n            }\n        </ul>\n        <button className=\"habits-reset\" onClick={this.props.onReset}>Reset All</button>\n        </>\n        )\n    }\n}\n\nexport default Habits;","import React, { PureComponent } from 'react';\n\nclass Navbar extends PureComponent {\n    render() {\n        return (\n            <nav className=\"navbar\">\n                <i className=\"navbar-logo fas fa-leaf\"></i>\n                <span>Habit Tracker</span>\n                <span className=\"navbar-count\">{this.props.totalCount}</span>\n            </nav>\n        );\n    }\n}\n\nexport default Navbar;","import React, { Component } from 'react';\nimport './app.css';\nimport Habits from './components/habits';\nimport Navbar from './components/navbar';\n\nclass App extends Component { // habit -> habits -> App\n  state = {\n    habits: [\n        { id: 1, name: 'Reading', count: 0 },\n        { id: 2, name: 'Running', count: 0 },\n        { id: 3, name: 'Coding', count: 0 },\n    ]\n}\nhandleIncrement = (habit) => {\n  const habits = this.state.habits.map(item => {\n    if(item.id === habit.id) {\n      return { ...habit, count: habit.count + 1 } // spread operator(...) => 새로운 배열에 오브젝트를 만들고 안의 아이템을 하나하나씩 복사\n    } \n    return item;\n  });\n\n  this.setState({ habits }); // key : value\n\n};\n\nhandleDecrement = (habit) => {\n  const habits = this.state.habits.map(item => {\n    if(item.id === habit.id) {\n      const count = habit.count - 1\n      return { ...habit, count: count < 0 ? 0 : count }; \n    } \n    return item;\n  });\n\n  this.setState({ habits });\n};\n\nhandleDelete = (habit) => {\n  const habits = this.state.habits.filter(itme => itme.id !== habit.id);\n  this.setState({ habits });\n\n};\n\nhandleAdd = name => {\n  const habits = [...this.state.habits, {id: Date.now(), name, count: 0}];\n  this.setState({ habits });\n};\n\nhandleReset = () => {\n  const habits = this.state.habits.map(habit => {\n    if (habit.count !== 0) {\n      return { ...habit, count: 0 }\n    }\n    return habit;\n  })\n  this.setState({ habits });\n};\n\nrender() {\n    return (\n      <>\n      <Navbar totalCount={this.state.habits.filter(item => item.count > 0).length} />\n      <Habits \n        habits={this.state.habits}\n          onIncrement={this.handleIncrement} \n          onDecrement={this.handleDecrement} \n          onDelete={this.handleDelete} \n          onAdd={this.handleAdd}\n          onReset={this.handleReset}\n      />\n      </>\n    );\n  }\n}\nexport default App;\n","// Using React Hook\nimport React, { useState, useRef, useEffect } from 'react';\n\nfunction SimpleHabit(props) {\n    const [count, setCount] = useState(0);\n    const spanRef = useRef();\n\n    const handleIncrement = () => {\n        setCount(count + 1)\n    }\n\n    // useEffect => similar to componetDidMount and componentDidUpdate\n    useEffect(() => {\n        console.log(`mounted & updated!: ${count}`)\n    }, [count]) // count가 변경될 때마다 useEffect() 호출\n\n    return (\n        <li className='habit'>\n            <span ref={spanRef} className=\"habit-name\">Reading</span>\n            <span className=\"habit-count\">{count}</span>\n            <button className=\"habit-button habit-increase\" onClick={handleIncrement}>\n                <i className=\"fas fa-plus-square\"></i>\n            </button>\n        </li>\n    );\n}\n\nexport default SimpleHabit;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './app';\nimport SimpleHabit from './components/simpleHabit';\nimport '@fortawesome/fontawesome-free/js/all.js';\n\nReactDOM.render( // 페이지에서 id가 root인 요소(index.html)를 가져와 컴포넌트 연결\n  <React.StrictMode>\n    <SimpleHabit />\n    {/* <App /> */}\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}